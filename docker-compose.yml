version: '4'
services:
  app-ts1:
    hostname: app-ts1
    container_name: app-ts1
    image: tailscale/tailscale:latest
    environment:
      - TS_AUTHKEY=${TS_AUTHKEY}?ephemeral=false
      - TS_EXTRA_ARGS=--advertise-tags=tag:container1
      - TS_STATE_DIR=/var/lib/tailscale
      # - TS_SERVE_CONFIG=/config/app.json
      - TS_USERSPACE=false
    volumes:
      - /dev/net/tun:/dev/net/tun
      - ${PWD}/tailscale/state:/var/lib/tailscale
      - ${PWD}/tailscale/config:/config
    cap_add:
      - net_admin
      - sys_module
    restart: unless-stopped
  
  # caddy:
  #   image: caddy:2.5-alpine
  #   container_name: caddy
  #   restart: unless-stopped
  #   environment:
  #     - TS_PERMIT_CERT_UID=caddy
  #   volumes:
  #     - ${PWD}/Caddyfile:/etc/caddy/Caddyfile
  #   depends_on:
  #     - app-ts
  #   port:
  #     - "80:80"
  #     - "443:443"
    

  app:
    build:
      context: ./
      dockerfile: Dockerfile
    container_name: app
    restart: unless-stopped
    environment:
      MISTRALAPI_KEY: ${MISTRALAPI_KEY}
      CLIENT_KEY: ${CLIENT_KEY}
      CLIENT_SECRET: ${CLIENT_SECRET}
      AUTH_URL: ${AUTH_URL}
      TOKEN_URL: ${TOKEN_URL}
      URL_PREFIX: ${URL_PREFIX}
      NGROK_AUTH: ${NGROK_AUTH}
      CONFIG_FILE: ${CONFIG_FILE}
      MINIO_ACCESS_KEY: ${MINIO_ACCESS_KEY}
      MINIO_SECRET_KEY: ${MINIO_SECRET_KEY}
      MINIO_BUCKET: ${MINIO_BUCKET}
      TS_AUTHKEY: ${TS_AUTHKEY}
      TS_CLIENTID: ${TS_CLIENTID}
      TS_CERT_DOMAIN: ${TS_CERT_DOMAIN}
      PASSWORD: ${PASSWORD}
    depends_on:
      - app-ts1
    network_mode: service:app-ts1

volumes:
  app:
    driver: local
  app-ts1:
    driver: local

